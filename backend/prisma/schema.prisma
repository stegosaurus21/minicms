// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

generator zod {
  provider          = "zod-prisma-types"
  useTypeAssertions = true
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  username             String        @unique
  password             String
  force_reset_password Boolean       @default(false)
  admin                Boolean       @default(false)
  submissions          Submission[]
  participants         Participant[]
}

model Submission {
  token        String           @id
  owner        User             @relation(fields: [owner_id], references: [id])
  challenge    ContestChallenge @relation(fields: [challenge_id, contest_id], references: [challenge_id, contest_id])
  owner_id     Int
  src          String
  contest_id   String
  challenge_id String
  score        Int?
  time         DateTime
  results      Result[]
}

model Result {
  submission       Submission @relation(fields: [submission_token], references: [token])
  submission_token String
  challenge_id     String
  task_number      Int
  test_number      Int
  token            String
  time             Float
  memory           Int
  status           String
  compile_output   String

  @@id([submission_token, task_number, test_number])
}

model Participant {
  user       User     @relation(fields: [user_id], references: [id])
  contest    Contest  @relation(fields: [contest_id], references: [id])
  user_id    Int
  contest_id String
  time       DateTime

  @@id([user_id, contest_id])
}

model Contest {
  id           String             @id
  title        String
  start_time   DateTime?
  end_time     DateTime?
  challenges   ContestChallenge[]
  participants Participant[]
  description  String
}

model ContestChallenge {
  challenge    Challenge    @relation(fields: [challenge_id], references: [id])
  challenge_id String
  contest      Contest      @relation(fields: [contest_id], references: [id])
  contest_id   String
  max_score    Int
  submissions  Submission[]

  @@id([challenge_id, contest_id])
}

model Challenge {
  id            String             @id
  title         String
  type          String
  tasks         Task[]
  contests      ContestChallenge[]
  description   String
  input_format  String
  output_format String
  time_limit    Int
  memory_limit  Int
  tests         Test[]
}

model Task {
  challenge    Challenge @relation(fields: [challenge_id], references: [id])
  challenge_id String
  type         String
  task_number  Int
  weight       Int
  tests        Test[]

  @@id([challenge_id, task_number])
}

model Test {
  task         Task      @relation(fields: [challenge_id, task_number], references: [challenge_id, task_number], onDelete: Cascade)
  challenge    Challenge @relation(fields: [challenge_id], references: [id])
  test_number  Int
  is_example   Boolean
  challenge_id String
  task_number  Int
  comment      String
  explanation  String
  input        String
  output       String

  @@id([challenge_id, task_number, test_number])
}
